using System;
using System.Collections.Generic;
using System.Linq;

namespace _10._Predicate_Party_
{
    class Program
    {
        static void Main(string[] args)
        {

            List<string> guests = Console.ReadLine().Split().ToList();
            while (true)
            {
                string[] command = Console.ReadLine().Split().ToArray();
                string getFirstCommand = command[0];
                if (getFirstCommand == "Party!")
                {
                    break;
                }
                string condition = command[1];
                string param = command[2];
                Func<string, string, bool> predicate;
                predicate = GetFunc(condition);
                if (getFirstCommand == "Double")
                {
                    List<string> addGuest = new List<string>();
                    addGuest = guests.Where(x => predicate(x, param)).ToList();
                    foreach (var name in addGuest)
                    {
                        int index = guests.IndexOf(name);
                        guests.Insert(index + 1, name);
                    }

                }
                else if (getFirstCommand == "Remove")
                {
                    guests = guests.Where(x => !predicate(x, param)).ToList();
                }
            }
            if (guests.Count > 0)
            {
                Console.WriteLine($"{string.Join(", ", guests)} are going to the party!");
            }
            else
            {
                Console.WriteLine("Nobody is going to the party!");
            }
        }
        static Func<string, string, bool> GetFunc(string filter)
        {
            if (filter == "Length")
            {
                return (x, c) => x.Length == int.Parse(c);
            }
            else if (filter == "StartsWith")
            {
                return (x, c) => x.StartsWith(c);
            }
            else if (filter == "EndsWith")
            {
                return (x, c) => x.EndsWith(c);
            }
            return null;
        }
    }
}
